<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="http://10.81.208.53:8999/feed.xml" rel="self" type="application/atom+xml" /><link href="http://10.81.208.53:8999/" rel="alternate" type="text/html" /><updated>2021-04-16T14:51:55+09:00</updated><id>http://10.81.208.53:8999/feed.xml</id><title type="html">Architecture Solution Opensource</title><subtitle>Architecture Solution Opensource.</subtitle><author><name>Architecture Solution Opensource</name></author><entry><title type="html">Codecove - Travis 연동</title><link href="http://10.81.208.53:8999/code-coverage-codecov-with-travis/" rel="alternate" type="text/html" title="Codecove - Travis 연동" /><published>2021-04-16T00:00:00+09:00</published><updated>2021-04-16T00:00:00+09:00</updated><id>http://10.81.208.53:8999/code-coverage-codecov-with-travis</id><content type="html" xml:base="http://10.81.208.53:8999/code-coverage-codecov-with-travis/">&lt;h2 id=&quot;code-coverage---codecov&quot;&gt;Code Coverage - CodeCov&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;codecov 사이트 가입 후 repository 활성화&lt;/li&gt;
  &lt;li&gt;travis.yml script추가&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;mvn&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;cobertura:cobertura&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;after_success&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bash &amp;lt;(curl -s https://codecov.io/bash)&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;codecov&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
   &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;CODECOV_TOME=583d22f4-1c33-4b5f-91ad-a370a0290fab&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;pom.xml plugin 추가&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.codehaus.mojo&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;cobertura-maven-plugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.7&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;formats&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;format&amp;gt;&lt;/span&gt;html&lt;span class=&quot;nt&quot;&gt;&amp;lt;/format&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;format&amp;gt;&lt;/span&gt;xml&lt;span class=&quot;nt&quot;&gt;&amp;lt;/format&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/formats&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;check&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Architecture Solution Opensource</name></author><category term="Blog" /><summary type="html">Code Coverage - CodeCov codecov 사이트 가입 후 repository 활성화 travis.yml script추가</summary></entry><entry><title type="html">Gatsby</title><link href="http://10.81.208.53:8999/gatsby/" rel="alternate" type="text/html" title="Gatsby" /><published>2021-04-16T00:00:00+09:00</published><updated>2021-04-16T00:00:00+09:00</updated><id>http://10.81.208.53:8999/gatsby</id><content type="html" xml:base="http://10.81.208.53:8999/gatsby/">&lt;h1 id=&quot;site---gatsby-static-site-generator&quot;&gt;Site - Gatsby Static Site Generator&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Gatsby Starter Template사이트에 방문하여 원하는 Template 설치 
https://www.gatsbyjs.com/starters/
    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Insatllation with 'git clone'&lt;/span&gt;
git clone git@github.com:&amp;lt;user&amp;gt;/&amp;lt;repository&amp;gt; my-site
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;my-site
&lt;span class=&quot;c&quot;&gt;# Installation dependency&lt;/span&gt;
yarn insatll       
&lt;span class=&quot;c&quot;&gt;# To develop&lt;/span&gt;
yarn develop
&lt;span class=&quot;c&quot;&gt;# To build&lt;/span&gt;
yarn build
&lt;span class=&quot;c&quot;&gt;# To start&lt;/span&gt;
gatsby develop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Git Repository에 Push&lt;/li&gt;
  &lt;li&gt;Git Page 연동
    &lt;ul&gt;
      &lt;li&gt;해당 repository의 Settings&lt;/li&gt;
      &lt;li&gt;Pages에서 해당 branch, root 로 설정하여 저장
&lt;img src=&quot;https://user-images.githubusercontent.com/20086137/114368273-36c37900-9bb8-11eb-9d9b-e090513ce31c.png&quot; alt=&quot;image&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Architecture Solution Opensource</name></author><category term="Blog" /><summary type="html">Site - Gatsby Static Site Generator Gatsby Starter Template사이트에 방문하여 원하는 Template 설치 https://www.gatsbyjs.com/starters/ # Insatllation with 'git clone' git clone git@github.com:&amp;lt;user&amp;gt;/&amp;lt;repository&amp;gt; my-site cd my-site # Installation dependency yarn insatll # To develop yarn develop # To build yarn build # To start gatsby develop Git Repository에 Push Git Page 연동 해당 repository의 Settings Pages에서 해당 branch, root 로 설정하여 저장</summary></entry><entry><title type="html">GitHub Action</title><link href="http://10.81.208.53:8999/github-action/" rel="alternate" type="text/html" title="GitHub Action" /><published>2021-04-16T00:00:00+09:00</published><updated>2021-04-16T00:00:00+09:00</updated><id>http://10.81.208.53:8999/github-action</id><content type="html" xml:base="http://10.81.208.53:8999/github-action/">&lt;p&gt;GitHub Action 은 소프트웨어 개발 워크플로우를 자동화하는 도구이다. 
Github 에서 Pull Reqeust, Issue 생성, Merge 등의 이벤트가 생성했을때 Action 을 통해 워크플로우를 수행할 수 있다.
기존에는 Travis 나 Circle 과 같은 CI 도구를 많이 사용하였으나 관리를 위해 GitHub 와 다른 서비스 페이지를 이동해야 하는 불편이 있었다.
이제는 GitHub 에서 직접 Action 서비스를 시작하면서, GitHub 안에서 CI/CD 작업이 가능해졌다.
Github Marketplace 를 통해 다른 사용자들이 공개한 Action 을 바로 활용할 수 있다.
대부분의 우리가 원한는 작업들이 이미 공개되어있으며, 간단히 조합만으로 새로운 워크플로우를 만들어 사용 할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;action-생성&quot;&gt;Action 생성&lt;/h2&gt;
&lt;p&gt;대부분의 작업은 Marketplace 에서 참조하여 사용이 가능하다. 하지만 추가적인 작업이 필요한경우 개인이 자신만의 Action 을 만들수도 있다. Docker Image 나 Java Script 를 사용하여 Action 을 생성할 수 있다.
자세한 내용은 &lt;a href=&quot;https://falsy.me/github-actions-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-2-%EC%BB%A4%EC%8A%A4%ED%85%80-%EC%95%A1%EC%85%98-%EB%A7%8C%EB%93%A4%EA%B8%B0-%EA%B9%83%ED%97%88%EB%B8%8C-%ED%8C%A8%ED%82%A4%EC%A7%80-%EB%A0%88/&quot;&gt;Falsy Lab 의 Blog&lt;/a&gt; 에서 확인할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;workflow-생성&quot;&gt;Workflow 생성&lt;/h2&gt;
&lt;p&gt;.github/workflows 디렉토리에 yml 을 작성하면 GitHub Action 에서 인식하여 Event 발생시 자동으로 해당하는 workflow 를 실행한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Sample Workflow - Artifact  생성 / Upload&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;JFrog upload&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Workflow 명&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Event - Workflow trigger 조건&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;master&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;pull_request&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;master&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Job id&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Workflow 수행 환경 (ubuntu, mac, window 가능)&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v2&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# code check out -&amp;gt; actions 에서 제공하는 공식 checkout 소스&lt;/span&gt;
                                  &lt;span class=&quot;c1&quot;&gt;#                    https://github.com/actions/checkout&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Set up JDK &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;11&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;# Java 설치&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/setup-java@v1&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;java-version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;11&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Grant execute permission for gradlew&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Gradle 수행권한 설정&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;chmod +x gradlew&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Build Jar&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Gradle Build 수행&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./gradlew build&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Upload Artifact to JFrog&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# JForg Upload 수행&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;katcosgrove/jfrogcli-action@v1.0.0-beta&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# katcosgrove 라는 개인이 생성한 action&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;build/libs/opensourceenv-1.0-SNAPSHOT.jar&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sampleRepo/opensourceenv/&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;--recursive=false'&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;username'&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Github Settings 에 등록한 secret 참조&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;pass&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;https://opensourceenv.jfrog.io/artifactory/'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=R8_veQiYBjI&amp;amp;ab_channel=TechWorldwithNana&quot;&gt;GitHub Actions Tutorial - Basic Concepts and CI/CD Pipeline with Docker&lt;/a&gt;&lt;/p&gt;</content><author><name>Architecture Solution Opensource</name></author><category term="Blog" /><summary type="html">GitHub Action 은 소프트웨어 개발 워크플로우를 자동화하는 도구이다. Github 에서 Pull Reqeust, Issue 생성, Merge 등의 이벤트가 생성했을때 Action 을 통해 워크플로우를 수행할 수 있다. 기존에는 Travis 나 Circle 과 같은 CI 도구를 많이 사용하였으나 관리를 위해 GitHub 와 다른 서비스 페이지를 이동해야 하는 불편이 있었다. 이제는 GitHub 에서 직접 Action 서비스를 시작하면서, GitHub 안에서 CI/CD 작업이 가능해졌다. Github Marketplace 를 통해 다른 사용자들이 공개한 Action 을 바로 활용할 수 있다. 대부분의 우리가 원한는 작업들이 이미 공개되어있으며, 간단히 조합만으로 새로운 워크플로우를 만들어 사용 할 수 있다.</summary></entry><entry><title type="html">GitHub Issue &amp;amp; Project</title><link href="http://10.81.208.53:8999/github-issue-project/" rel="alternate" type="text/html" title="GitHub Issue &amp;amp; Project" /><published>2021-04-16T00:00:00+09:00</published><updated>2021-04-16T00:00:00+09:00</updated><id>http://10.81.208.53:8999/github-issue-project</id><content type="html" xml:base="http://10.81.208.53:8999/github-issue-project/">&lt;h2 id=&quot;issue&quot;&gt;Issue&lt;/h2&gt;
&lt;p&gt;프로젝트 내부적으로 Issue 를 통해 요구사항 / 진적사항 관리가 가능하며,
사용자들이 문의를 올리거나, Bug 리포팅하는 공간으로도 사용이 가능하다. 
Github 에서 Issue 번호가 생성되면. Pull Request 부터, Release Note 작업까지 해당 번호를 다양한 방식으로 연동하여 사용할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;template&quot;&gt;Template&lt;/h3&gt;
&lt;p&gt;GitHub Settings 의 Features 에서 Issue 에 대한 Template 설정이 가능하다. Template 을 설정하면 issue 생성시 자동으로 Template 에 작성한 형식이 붙여진다.
설정한 내용은 ‘/.github/ISSUE_TEMPLATE/’ 디렉토리에서 확인이 가능하다. 원하는 템플릿을 자유롭개 생성 가능하며, 이슈 유형에 따라 label, assignees 를 지정할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;label&quot;&gt;Label&lt;/h3&gt;
&lt;p&gt;Issue 마다 Label(bug, enhancement …) 을 지정할 수 있다. Github 에서 제공하는 Label 이 맘에 들지 않는경우 언제든 추가 생성이 가능하다.
Label 을 잘 달아두면, Release Note 작성시 자동으로 Label 에 따라 이슈를 분기하여 작성이 가능하고. 추후 Issue 검색시에도 용이하다.&lt;/p&gt;

&lt;h3 id=&quot;milestone&quot;&gt;Milestone&lt;/h3&gt;
&lt;p&gt;Milestone 을 생성하고 Issue 를 맵핑하면 진적률 관리가 가능하다. Issue 가 많아질 경우 Issue 화면만으로 진척률을 관리하기는 어렵다.
Milestone 을 꼭 장성하여 관리하는것이 좋다.&lt;/p&gt;

&lt;h2 id=&quot;project&quot;&gt;Project&lt;/h2&gt;
&lt;p&gt;Kanban 보드를 작성하여 프로젝트의 전체 현황을 파악할 수 있다.
Project 에 생성한 Card 들을 Issue 로 변환할 수 있으며, 반대로 Issue 를 Kanban 보드에 등록할수도 있다.&lt;/p&gt;</content><author><name>Architecture Solution Opensource</name></author><category term="Blog" /><summary type="html">Issue 프로젝트 내부적으로 Issue 를 통해 요구사항 / 진적사항 관리가 가능하며, 사용자들이 문의를 올리거나, Bug 리포팅하는 공간으로도 사용이 가능하다. Github 에서 Issue 번호가 생성되면. Pull Request 부터, Release Note 작업까지 해당 번호를 다양한 방식으로 연동하여 사용할 수 있다.</summary></entry><entry><title type="html">SonarCloud - Travis 연동</title><link href="http://10.81.208.53:8999/sonarcloud-travis/" rel="alternate" type="text/html" title="SonarCloud - Travis 연동" /><published>2021-04-16T00:00:00+09:00</published><updated>2021-04-16T00:00:00+09:00</updated><id>http://10.81.208.53:8999/sonarcloud-travis</id><content type="html" xml:base="http://10.81.208.53:8999/sonarcloud-travis/">&lt;h1 id=&quot;code-quality---sonarcloud&quot;&gt;Code Quality - SonarCloud&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;SonarCloud와 Github연결&lt;/li&gt;
  &lt;li&gt;SonarCloud 회원가입(https://sonarcloud.io/)&lt;/li&gt;
  &lt;li&gt;Allow to access for github repository&lt;/li&gt;
  &lt;li&gt;get secure key&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;travis
travis login &lt;span class=&quot;nt&quot;&gt;--github-token&lt;/span&gt; ghp_uS&lt;span class=&quot;k&quot;&gt;****************&lt;/span&gt;wtN0iiSxg
travis encrypt &lt;span class=&quot;nv&quot;&gt;SOMEVAR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;fe7fe6**********e014803dfa8f&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; giyeonYu/OSS
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;ghp_uS&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**wtN0iiSxg =&amp;gt; github token
fe7fe6&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;**e014803dfa8f =&amp;gt; travis token&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;edit .travis.yml&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;addons&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;sonarcloud&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;organization&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;giyeonyu&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;secure&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;**************************&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# encrypted value of your token&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# the following command line builds the project, runs the tests with coverage and then execute the SonarCloud analysis&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent install sonar:sonar -Dsonar.login=c1a58ac2e42e06851dd4e9c8de969a76a1d53a1f&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;sonarcloud needs over jdk11 at least.&lt;/p&gt;</content><author><name>Architecture Solution Opensource</name></author><category term="Blog" /><summary type="html">Code Quality - SonarCloud SonarCloud와 Github연결 SonarCloud 회원가입(https://sonarcloud.io/) Allow to access for github repository get secure key</summary></entry><entry><title type="html">Github - Telegram 연동</title><link href="http://10.81.208.53:8999/telegram/" rel="alternate" type="text/html" title="Github - Telegram 연동" /><published>2021-04-16T00:00:00+09:00</published><updated>2021-04-16T00:00:00+09:00</updated><id>http://10.81.208.53:8999/telegram</id><content type="html" xml:base="http://10.81.208.53:8999/telegram/">&lt;h1 id=&quot;telegram-notify&quot;&gt;Telegram Notify&lt;/h1&gt;
&lt;p&gt;1.Add ./github/workflow/main.xml for github action&lt;/p&gt;
&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;telegram message&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Build&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@master&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;send custom message&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;appleboy/telegram-action@master&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;The $ event triggered final step.&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;echo This event is a pull request that had an assignee removed.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;2.Add repository secrets&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Settings -&amp;gt;  Secrets&lt;/li&gt;
  &lt;li&gt;TELEGRAM_TO, TELEGRAM_TOKEN 생성&lt;/li&gt;
  &lt;li&gt;guide to get TELEGRAM_TO, TELEGRAM_TOKEN (https://core.telegram.org/bots/api)&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Architecture Solution Opensource</name></author><category term="Blog" /><summary type="html">Telegram Notify 1.Add ./github/workflow/main.xml for github action ```yml name: telegram message on: [push] jobs:</summary></entry><entry><title type="html">Travis</title><link href="http://10.81.208.53:8999/travis/" rel="alternate" type="text/html" title="Travis" /><published>2021-04-16T00:00:00+09:00</published><updated>2021-04-16T00:00:00+09:00</updated><id>http://10.81.208.53:8999/travis</id><content type="html" xml:base="http://10.81.208.53:8999/travis/">&lt;h2 id=&quot;travis&quot;&gt;Travis&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Travis CI, Github계정으로 회원가입&lt;/li&gt;
  &lt;li&gt;연동시킬 Repository 활성화&lt;/li&gt;
  &lt;li&gt;Project root경로에 .travis.yml 작성&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;na&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;java&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;jdk&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;openjdk11&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# using jdk11 at least for sonarcloud&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;only&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;master&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Travis CI 서버의 Home&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;directories&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$HOME/.m2&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# CI 실행 완료시 메일로 알람&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;notifications&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;recipients&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;your@Email.com&lt;/span&gt;
      
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Github Readme.md에 Travis badge 추가&lt;/li&gt;
  &lt;li&gt;참고 사이트  https://velog.io/@recordsbeat/travis-ci-maven-%EC%97%B0%EB%8F%99&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Architecture Solution Opensource</name></author><category term="Blog" /><summary type="html">Travis Travis CI, Github계정으로 회원가입 연동시킬 Repository 활성화 Project root경로에 .travis.yml 작성</summary></entry><entry><title type="html">Jekyll</title><link href="http://10.81.208.53:8999/jekyll/" rel="alternate" type="text/html" title="Jekyll" /><published>2021-04-14T00:00:00+09:00</published><updated>2021-04-14T00:00:00+09:00</updated><id>http://10.81.208.53:8999/jekyll</id><content type="html" xml:base="http://10.81.208.53:8999/jekyll/">&lt;p&gt;Jekyll은 개인 프로젝트 또는 조직 사이트에 적합한 정적 사이트 생성기 입니다. Jekyll 은 콘텐츠를 가져와 Markdown 및 Liquid 템플릿을 렌더링하여 웹사이트를 생성합니다. 기본적으로 Jekyll 은 Ruby 로 만들어져 있으나, 운영하는데 Ruby 를 공부할 필요는 없습니다.
간단히 Markdown 을 생성 수정하는것 만으로 웹사이트를 운영할 수 있습니다. 또한 GitHub 와 강력히 연동되어 있습니다.
GitHub 에 Markdown 파일을 push 하기만 하면 Github Page 에서 자동으로 웹페이지를 업데이트해 줍니다.&lt;/p&gt;

&lt;h2 id=&quot;jekyll-theme&quot;&gt;Jekyll Theme&lt;/h2&gt;
&lt;p&gt;Jekyll 에서는 Theme 를 사용하여 웹사이트를 구성할 수 있습니다. &lt;a href=&quot;https://jekyllthemes.io/&quot;&gt;Jekyll Themes&lt;/a&gt; 에 접속하면 여러가지 형태의 Theme 를 확인 할 수 있습니다. 현재 사이트는 &lt;a href=&quot;https://mmistakes.github.io/minimal-mistakes/&quot;&gt;Minimal Mistakes Theme&lt;/a&gt; 를 사용하였습니다. Minimal Mistakes 는 가이드 문서가 자세히 작성되어있고, 구글링을 통해 정보를 많이 얻을 수 있어 Jekyll 을 시작하기에 좋은 Theme 입니다.&lt;/p&gt;

&lt;h2 id=&quot;github-page-시작하기&quot;&gt;Github Page 시작하기&lt;/h2&gt;
&lt;h3 id=&quot;ruby--jekyll-설치&quot;&gt;Ruby / Jekyll 설치&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://jekyllrb-ko.github.io/docs/&quot;&gt;Jekyll 설치가이드&lt;/a&gt; 를 참조하여 진행합니다. CNS 클라우드 윈도우 환경에서는 Jekyll / Bundler 설치 관련에러가 발생할 수 있습니다. ubuntu 서버에서 진행시 문제없이 설치가 가능합니다.&lt;/p&gt;

&lt;h3 id=&quot;theme-적용&quot;&gt;Theme 적용&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mmistakes/minimal-mistakes&quot;&gt;Minimal Mistakes github&lt;/a&gt; 에서 소스를 다운로드 받아 ‘bundle exec jekyll serve’ 명령을 수행하여 Theme 가 적용된 화면을 확인합니다.&lt;/p&gt;

&lt;h3 id=&quot;github-page-연동&quot;&gt;Github Page 연동&lt;/h3&gt;
&lt;h4 id=&quot;대표-page-용-별도-repository-사용&quot;&gt;대표 Page 용 별도 Repository 사용&lt;/h4&gt;
&lt;p&gt;‘username.github.io’ Repository 를 생성하고, 해당 Repository 로 소스를 push 하면 Github Page 가 자동으로 생성됩니다.
몇분정도 시간이 걸리며, username.github.io 로 브라우저에서 접속이 가능합니다.&lt;/p&gt;

&lt;h4 id=&quot;프로젝트-별-page-사용&quot;&gt;프로젝트 별 Page 사용&lt;/h4&gt;
&lt;p&gt;프로젝트의 Repository 에서 ‘gh-pages’ branch 를 생성하거나, root 경로에 ‘docs’ 디렉토리를 생성하여 소스를 업로드 합니다.
Repository -&amp;gt; Settings -&amp;gt; Pages 메뉴로 접근하면 GitHub Page 에서 사용할 branch / 디렉토리를 선택 할 수 있습니다.
이경우 username.github.io/repositoryname 으로 주소가 생성됩니다.&lt;/p&gt;

&lt;p&gt;여기까지 진행하시면 기본적인 Github Page 셋업은 완료되었습니다.
Minimal-Mistakes 관련 상세 설정은 &lt;a href=&quot;https://mmistakes.github.io/minimal-mistakes/&quot;&gt;Minimal Mistakes&lt;/a&gt;, &lt;a href=&quot;https://devinlife.com/howto/&quot;&gt;취미로 코딩하는 개발자&lt;/a&gt;, &lt;a href=&quot;https://ansohxxn.github.io/blog/jekyll-directory-structure/&quot;&gt;공부하는 식빵맘&lt;/a&gt; 를 참조하시어
원하시는 방향으로 발전시켜 나가시면 됩니다.&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://jekyllrb-ko.github.io/&quot;&gt;Jekyll 공식&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://mmistakes.github.io/minimal-mistakes/&quot;&gt;Minimal Mistakes&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://devinlife.com/howto/&quot;&gt;취미로 코딩하는 개발자 - github page 따라하기&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://ansohxxn.github.io/blog/jekyll-directory-structure/&quot;&gt;공부하는 식빵맘&lt;/a&gt;&lt;/p&gt;</content><author><name>Architecture Solution Opensource</name></author><category term="Blog" /><summary type="html">Jekyll은 개인 프로젝트 또는 조직 사이트에 적합한 정적 사이트 생성기 입니다. Jekyll 은 콘텐츠를 가져와 Markdown 및 Liquid 템플릿을 렌더링하여 웹사이트를 생성합니다. 기본적으로 Jekyll 은 Ruby 로 만들어져 있으나, 운영하는데 Ruby 를 공부할 필요는 없습니다. 간단히 Markdown 을 생성 수정하는것 만으로 웹사이트를 운영할 수 있습니다. 또한 GitHub 와 강력히 연동되어 있습니다. GitHub 에 Markdown 파일을 push 하기만 하면 Github Page 에서 자동으로 웹페이지를 업데이트해 줍니다.</summary></entry><entry><title type="html">Codecov - Github Action 연동</title><link href="http://10.81.208.53:8999/code-coverage/" rel="alternate" type="text/html" title="Codecov - Github Action 연동" /><published>2021-04-03T00:00:00+09:00</published><updated>2021-04-03T00:00:00+09:00</updated><id>http://10.81.208.53:8999/code-coverage</id><content type="html" xml:base="http://10.81.208.53:8999/code-coverage/">&lt;h2 id=&quot;code-coverage&quot;&gt;Code Coverage&lt;/h2&gt;
&lt;p&gt;Code Coverage 는 테스트를 진행했을때 코드 자체가 얼마나 실행되었는지 측정하는 것이다.
코드는 구문(Statement), 조건(Condition), 결정(Decision) 으로 이루어진다. 이 세가지 항목을 얼마나 커버했느냐에 따라 측정값이 달라진다. 일반적으로 많이 사용되는 커버리지는 구문(Statement)커버리지이며, 실행 코드라인이 한번 이상 실행 되면 충족된다. 조건(Condition)커버리지는 각 내부 조건이 참 혹은 거짓을 가지면 충족된다. 결정(Decision) 커버리지는 각 분기의 내부 조건자체가 아닌 이러한 조건으로 인해 전체 결과가 참 혹은 거짓이면 충족된다.&lt;/p&gt;

&lt;h2 id=&quot;jacoco&quot;&gt;JaCoCo&lt;/h2&gt;
&lt;p&gt;JaCoCo 는 Java Code Coverage 를 측정하는 오픈소스 라이브러리다. 테스트 결과에 따라 xml, html 형태로 보고서가 작성된다. 또한 목표하는 커버리지를 설정하고, 이를 만족하는지 확인 할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;jacoco-설정&quot;&gt;JaCoCo 설정&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Gradle 설정에 플러그인 추가 / 설정 진행&lt;br /&gt;
&lt;a href=&quot;#참고&quot;&gt;(상세 설정은 본 포스트 하단 참조.)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;plugins&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'jacoco'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;jacoco&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;toolVersion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0.8.5&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;jacocoTestReport&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;reports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// codecov depends on xml format report&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;jacocoTestCoverageVerification&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;violationRules&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'CLASS'&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'METHOD'&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'COVEREDRATIO'&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;minimum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.90&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;gradle test 수행을 통해 정상 작동 확인&lt;br /&gt;
 ./build/report 경로에 정상적으로 jacoco 리포트가 생성 되었는지 확인한다.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shell script 
gradle test jacocoTestReport jacocoTestCoverageVerification
&lt;/code&gt;
    &lt;h2 id=&quot;codecov&quot;&gt;Codecov&lt;/h2&gt;
    &lt;p&gt;Codecov 는 Code Coverage 결과를 통합 관리하고, Github / Circle CI / Slack 등과 연동하여 사용할 수 있는 편의를 제공한다. 주로 Github PR 분석, PR Block, Merging Report 의 용도로 사용 한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;codecov-사용법&quot;&gt;Codecov 사용법&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Codecov 가입 진행 &lt;a href=&quot;https://about.codecov.io/&quot;&gt;(Codecov 홈페이지)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Codecov 를 사용할 Github 계정 / Repository 선택하면 Codecov Token 이 발급된다.&lt;br /&gt;
 해당 토큰을 복사 후 Github Repository Secret 에 등록 한다.&lt;br /&gt;
&lt;img src=&quot;../assets/images/posts/createCodecovSecretToGithub.PNG&quot; alt=&quot;createCodecovSecretToGithub&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Github Action 을 이용하여 Gradle test 결과를 Codecov 로 업로드&lt;br /&gt;
프로젝트 root 의 .github/workflows 디렉토리에 test.yml 을 생성한다. 내용은 아래와 같다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Test with Gradle&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Event&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;master&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt; 
  &lt;span class=&quot;na&quot;&gt;pull_request&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;master&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
  &lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Job id&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Runner&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v2&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Step&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Set up JDK 11&lt;/span&gt; 
      &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/setup-java@v1&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;java-version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;11&lt;/span&gt; 
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Grant execute permission for gradlew&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;chmod +x gradlew&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Test with Gradle&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./gradlew test jacocoTestReport jacocoTestCoverageVerification&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Upload coverage to Codecov&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;codecov/codecov-action@v1&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./build/reports/jacoco/test/jacocoTestReport.xml&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Pull Request 요청시 bot 을 통한 자동 Test 결과 comment 생성&lt;br /&gt;
프로젝트 root 에 .codecov.yml 을 생성한다. 내용은 아래와 같다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;                  &lt;span class=&quot;c1&quot;&gt;# this is a top-level key&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;reach,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;diff,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;flags,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;files&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;behavior&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;default&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;require_changes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# if true: only post the comment if coverage changes&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;require_base&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;no&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# [yes :: must have a base report to post]&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;require_head&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yes&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;# [yes :: must have a head report to post]&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;# branch names that can post comment&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;master&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;기타-참고-사항&quot;&gt;기타 참고 사항&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Lombok에 의해 자동 생성된 코드에 대한 Test Coverage 예외처리 적용&lt;br /&gt;
프로젝트 root 에 lombok.config 를 생성한다. 내용은 아래와 같다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;config.stopBubbling = &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;lombok.addLombokGeneratedAnnotation = &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.gradle.org/current/userguide/jacoco_plugin.html&quot;&gt;JaCoCo-Gradle 공식&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://woowabros.github.io/experience/2020/02/02/jacoco-config-on-gradle-project.html&quot;&gt;JaCoCo-우아한형제들 블로그&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://woowacourse.github.io/javable/post/2020-10-24-code-coverage/&quot;&gt;CodeCoverage-우아한테크코스&lt;/a&gt;&lt;/p&gt;</content><author><name>Architecture Solution Opensource</name></author><category term="Blog" /><summary type="html">Code Coverage Code Coverage 는 테스트를 진행했을때 코드 자체가 얼마나 실행되었는지 측정하는 것이다. 코드는 구문(Statement), 조건(Condition), 결정(Decision) 으로 이루어진다. 이 세가지 항목을 얼마나 커버했느냐에 따라 측정값이 달라진다. 일반적으로 많이 사용되는 커버리지는 구문(Statement)커버리지이며, 실행 코드라인이 한번 이상 실행 되면 충족된다. 조건(Condition)커버리지는 각 내부 조건이 참 혹은 거짓을 가지면 충족된다. 결정(Decision) 커버리지는 각 분기의 내부 조건자체가 아닌 이러한 조건으로 인해 전체 결과가 참 혹은 거짓이면 충족된다.</summary></entry><entry><title type="html">Opensource Guide</title><link href="http://10.81.208.53:8999/oss-guide/" rel="alternate" type="text/html" title="Opensource Guide" /><published>2021-04-03T00:00:00+09:00</published><updated>2021-04-03T00:00:00+09:00</updated><id>http://10.81.208.53:8999/oss-guide</id><content type="html" xml:base="http://10.81.208.53:8999/oss-guide/">&lt;p&gt;#oss guide 시작??&lt;/p&gt;</content><author><name>Architecture Solution Opensource</name></author><category term="Blog" /><summary type="html">#oss guide 시작??</summary></entry></feed>